package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jxsr12/oldegg/config"
	"github.com/jxsr12/oldegg/graph/model"
	"github.com/jxsr12/oldegg/service"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"gorm.io/gorm"
)

// CheckoutCart is the resolver for the checkoutCart field.
func (r *mutationResolver) CheckoutCart(ctx context.Context, shipmentTypeID string, paymentMethodID string, addressID string, distance float64) (*model.TransactionHeader, error) {
	db := config.GetDB()

	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Error, token gaada",
		}
	}

	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID

	var carts []*model.Cart
	err := db.Where("user_id = ?", userID).Find(&carts).Error
	if err != nil || carts == nil {
		return nil, &gqlerror.Error{
			Message: "Error, cart gaada",
		}
	}

	header := &model.TransactionHeader{
		ID:              uuid.NewString(),
		Date:            time.Now(),
		UserID:          userID,
		ShipmentID:      shipmentTypeID,
		PaymentMethodID: paymentMethodID,
		Status:          "COMPLETE",
		AddressID:       addressID,
	}

	err = db.Create(header).Error

	if err != nil {
		return header, &gqlerror.Error{
			Message: "Error creating transaction header",
		}
	}

	orderValue := 0.00

	for _, cart := range carts {
		detail := &model.TransactionDetail{
			TransactionHeaderID: header.ID,
			ProductID:           cart.ProductID,
			Quantity:            cart.Quantity,
			Notes:               "None",
		}

		product := new(model.Product)
		if err := db.First(product, "id = ?", cart.ProductID).Error; err != nil {
			return nil, err
		}
		product.Stock -= cart.Quantity

		orderValue += (product.Price * (100 - product.Discount) / 100) * float64(cart.Quantity)

		if err := db.Save(product).Error; err != nil {
			return nil, err
		}

		err = db.Create(detail).Error

		if err != nil {
			return header, &gqlerror.Error{
				Message: "Error, create detail",
			}
		}

		err = db.Delete(cart).Error
		if err != nil {
			return header, &gqlerror.Error{
				Message: "Error, delete cart",
			}
		}

		// Create ReviewCredit entity for each product
		reviewCredit := &model.ReviewCredit{
			ProductID: cart.ProductID,
			UserID:    userID,
		}
		if err := db.Create(reviewCredit).Error; err != nil {
			return header, &gqlerror.Error{
				Message: "Error creating review credit",
			}
		}
	}

	shipment := new(model.Shipment)
	if err := db.First(shipment, "id = ?", shipmentTypeID).Error; err != nil {
		return nil, err
	}

	orderValue += shipment.Fee * distance

	user := new(model.User)
	if err := db.First(user, "id = ?", userID).Error; err != nil {
		return nil, err
	}

	newBalance := user.CreditBalance - float64(orderValue)

	err = db.Model(&model.User{}).Where("id = ?", userID).Update("credit_balance", newBalance).Error
	if err != nil {
		return header, &gqlerror.Error{
			Message: "Error, deducting balance",
		}
	}

	return header, nil
}

// RedeemVoucher is the resolver for the redeemVoucher field.
func (r *mutationResolver) RedeemVoucher(ctx context.Context, id string) (*model.CreditVoucher, error) {
	db := config.GetDB()

	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Error, token gaada",
		}
	}
	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID

	// Retrieve the credit voucher with the given ID
	var voucher model.CreditVoucher
	if err := db.Where("id = ?", id).First(&voucher).Error; err != nil {
		return nil, err
	}

	// Check if the voucher is valid
	if voucher.Valid {
		// Begin a transaction
		tx := db.Begin()

		// Update the voucher's valid status to false
		if err := tx.Model(&voucher).Update("valid", false).Error; err != nil {
			tx.Rollback()
			return nil, err
		}

		// Update the user's credit balance with the voucher's value
		if err := tx.Model(&model.User{}).Where("id = ?", userID).UpdateColumn("credit_balance", gorm.Expr("credit_balance + ?", voucher.Value)).Error; err != nil {
			tx.Rollback()
			return nil, err
		}

		// Commit the transaction
		if err := tx.Commit().Error; err != nil {
			return nil, err
		}

		return &voucher, nil
	} else {
		return nil, &gqlerror.Error{
			Message: "Credit voucher is not valid",
		}
	}
}

// ShipmentType is the resolver for the shipmentType field.
func (r *queryResolver) ShipmentType(ctx context.Context, id string) (*model.Shipment, error) {
	panic(fmt.Errorf("not implemented: ShipmentType - shipmentType"))
}

// ShipmentTypes is the resolver for the shipmentTypes field.
func (r *queryResolver) ShipmentTypes(ctx context.Context) ([]*model.Shipment, error) {
	db := config.GetDB()

	var models []*model.Shipment
	return models, db.Find(&models).Error
}

// PaymentMethod is the resolver for the paymentMethod field.
func (r *queryResolver) PaymentMethod(ctx context.Context, id string) (*model.PaymentMethod, error) {
	panic(fmt.Errorf("not implemented: PaymentMethod - paymentMethod"))
}

// PaymentMethods is the resolver for the paymentMethods field.
func (r *queryResolver) PaymentMethods(ctx context.Context) ([]*model.PaymentMethod, error) {
	db := config.GetDB()

	var models []*model.PaymentMethod
	return models, db.Find(&models).Error
}

// TransactionHeaders is the resolver for the transactionHeaders field.
func (r *queryResolver) TransactionHeaders(ctx context.Context) ([]*model.TransactionHeader, error) {
	db := config.GetDB()

	var models []*model.TransactionHeader
	return models, db.Find(&models).Error
}

// UserOrders is the resolver for the userOrders field.
func (r *queryResolver) UserOrders(ctx context.Context) ([]*model.TransactionHeader, error) {
	db := config.GetDB()

	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Error, token gaada",
		}
	}
	// Retrieve user ID from auth context
	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID

	var models []*model.TransactionHeader
	return models, db.Where("user_id = ?", userID).Order("date DESC").Find(&models).Error
}

// TransactionHeader is the resolver for the transactionHeader field.
func (r *transactionDetailResolver) TransactionHeader(ctx context.Context, obj *model.TransactionDetail) (*model.TransactionHeader, error) {
	db := config.GetDB()
	th := new(model.TransactionHeader)

	return th, db.First(th, "id = ?", obj.TransactionHeaderID).Error
}

// Product is the resolver for the product field.
func (r *transactionDetailResolver) Product(ctx context.Context, obj *model.TransactionDetail) (*model.Product, error) {
	db := config.GetDB()
	th := new(model.TransactionHeader)

	err := db.First(th, "id = ?", obj.TransactionHeaderID).Error
	if err != nil {
		return nil, &gqlerror.Error{
			Message: "Error, header gak ada",
		}
	}

	product := new(model.Product)

	return product, db.FirstOrInit(product, "id = ? ", obj.ProductID).Error
}

// User is the resolver for the user field.
func (r *transactionHeaderResolver) User(ctx context.Context, obj *model.TransactionHeader) (*model.User, error) {
	db := config.GetDB()
	user := new(model.User)

	return user, db.First(user, "id = ?", obj.UserID).Error
}

// Shipment is the resolver for the shipment field.
func (r *transactionHeaderResolver) Shipment(ctx context.Context, obj *model.TransactionHeader) (*model.Shipment, error) {
	db := config.GetDB()
	shipping := new(model.Shipment)

	return shipping, db.First(shipping, "id = ?", obj.ShipmentID).Error
}

// PaymentMethod is the resolver for the paymentMethod field.
func (r *transactionHeaderResolver) PaymentMethod(ctx context.Context, obj *model.TransactionHeader) (*model.PaymentMethod, error) {
	db := config.GetDB()
	pm := new(model.PaymentMethod)

	return pm, db.First(pm, "id = ?", obj.PaymentMethodID).Error
}

// Address is the resolver for the address field.
func (r *transactionHeaderResolver) Address(ctx context.Context, obj *model.TransactionHeader) (*model.Address, error) {
	db := config.GetDB()
	address := new(model.Address)

	return address, db.First(address, "id = ?", obj.AddressID).Error
}

// TransactionDetails is the resolver for the transactionDetails field.
func (r *transactionHeaderResolver) TransactionDetails(ctx context.Context, obj *model.TransactionHeader) ([]*model.TransactionDetail, error) {
	db := config.GetDB()
	var models []*model.TransactionDetail

	return models, db.Where("transaction_header_id = ?", obj.ID).Find(&models).Error
}

// TransactionDetail returns TransactionDetailResolver implementation.
func (r *Resolver) TransactionDetail() TransactionDetailResolver {
	return &transactionDetailResolver{r}
}

// TransactionHeader returns TransactionHeaderResolver implementation.
func (r *Resolver) TransactionHeader() TransactionHeaderResolver {
	return &transactionHeaderResolver{r}
}

type transactionDetailResolver struct{ *Resolver }
type transactionHeaderResolver struct{ *Resolver }
