package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jxsr12/oldegg/config"
	"github.com/jxsr12/oldegg/graph/model"
	"github.com/jxsr12/oldegg/service"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// CreateUserChat is the resolver for the createUserChat field.
func (r *mutationResolver) CreateUserChat(ctx context.Context, sellerID string, customerID string) (*model.UserChat, error) {
	db := config.GetDB()

	// Get the authenticated user
	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID
	_, err := service.UserGetByID(ctx, userID)
	if err != nil {
		return nil, err
	}

	// Create the user chat
	chat := &model.UserChat{
		ID:         uuid.NewString(),
		SellerID:   sellerID,
		CustomerID: customerID,
		CreatedAt:  time.Now(),
	}
	err = db.Create(chat).Error
	if err != nil {
		return nil, err
	}

	return chat, nil
}

// CreateSupportChat is the resolver for the createSupportChat field.
func (r *mutationResolver) CreateSupportChat(ctx context.Context, customerID string) (*model.SupportChat, error) {
	db := config.GetDB()

	// Get the authenticated user
	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID
	_, err := service.UserGetByID(ctx, userID)
	if err != nil {
		return nil, err
	}

	// Create the support chat
	chat := &model.SupportChat{
		ID:         uuid.NewString(),
		CustomerID: customerID,
		IsResolved: false,
		TopicTags:  "",
		CreatedAt:  time.Now(),
	}
	err = db.Create(chat).Error
	if err != nil {
		return nil, err
	}

	return chat, nil
}

// CreateNotification is the resolver for the createNotification field.
func (r *mutationResolver) CreateNotification(ctx context.Context, fromName string, userID string, text string) (*model.Notification, error) {
	panic(fmt.Errorf("not implemented: CreateNotification - createNotification"))
}

// AddSupportChatTopic is the resolver for the addSupportChatTopic field.
func (r *mutationResolver) AddSupportChatTopic(ctx context.Context, chatID string, topic string) (*model.SupportChat, error) {
	db := config.GetDB()

	// Get the authenticated user
	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID
	_, err := service.UserGetByID(ctx, userID)
	if err != nil {
		return nil, err
	}

	// Get the SupportChat by ID
	chat := &model.SupportChat{}
	if err := db.Where("id = ?", chatID).First(chat).Error; err != nil {
		return nil, err
	}

	// Set the topicTags field to the given topic
	chat.TopicTags = topic

	if err := db.Save(chat).Error; err != nil {
		return nil, err
	}

	return chat, nil
}

// MarkResolved is the resolver for the markResolved field.
func (r *mutationResolver) MarkResolved(ctx context.Context, chatID string) (*model.SupportChat, error) {
	db := config.GetDB()

	// Get the authenticated user
	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID
	_, err := service.UserGetByID(ctx, userID)
	if err != nil {
		return nil, err
	}

	// Get the SupportChat by ID
	chat := &model.SupportChat{}
	if err := db.Where("id = ?", chatID).First(chat).Error; err != nil {
		return nil, err
	}

	// Set the isResolved field to true
	chat.IsResolved = true

	if err := db.Save(chat).Error; err != nil {
		return nil, err
	}

	return chat, nil
}

// SendUserMessage is the resolver for the sendUserMessage field.
func (r *mutationResolver) SendUserMessage(ctx context.Context, isSellerMessage bool, chatID string, text string, fileURL *string, imageURL *string) (*model.UserMessage, error) {
	db := config.GetDB()

	// Get the authenticated user
	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID
	_, err := service.UserGetByID(ctx, userID)
	if err != nil {
		return nil, err
	}

	// Get the chat by ID
	var chat model.UserChat
	err = db.Where("id = ?", chatID).First(&chat).Error
	if err != nil {
		return nil, err
	}

	shop, _ := service.ShopGetByUserID(ctx, userID)

	// Check if the user is authorized to send message in this chat
	if userID != chat.CustomerID && shop.ID != chat.SellerID {
		return nil, &gqlerror.Error{
			Message: "You are not authorized to send message in this chat",
		}
	}

	// Create the user message
	message := &model.UserMessage{
		ID:              uuid.NewString(),
		ChatID:          chatID,
		IsSellerMessage: isSellerMessage,
		Text:            text,
		FileURL:         service.GetStringOrDefault(fileURL),
		ImageURL:        service.GetStringOrDefault(imageURL),
		CreatedAt:       time.Now(),
	}
	err = db.Create(message).Error
	if err != nil {
		return nil, err
	}

	return message, nil
}

// SendUserMessage is the resolver for the sendUserMessage field.
func (r *mutationResolver) SendSupportMessage(ctx context.Context, isStaffMessage bool, chatID string, text string, fileURL *string, imageURL *string) (*model.SupportMessage, error) {
	db := config.GetDB()

	// Get the authenticated user
	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID
	user, err := service.UserGetByID(ctx, userID)
	if err != nil {
		return nil, err
	}

	// Get the chat by ID
	var chat model.SupportChat
	err = db.Where("id = ?", chatID).First(&chat).Error
	if err != nil {
		return nil, err
	}

	if chat.IsResolved {
		return nil, &gqlerror.Error{
			Message: "Cannot send message to a resolved support chat",
		}
	}

	// Check if the user is authorized to send message in this chat
	if userID != chat.CustomerID && user.Role != model.UserRoleAdmin {
		return nil, &gqlerror.Error{
			Message: "You are not authorized to send message in this chat",
		}
	}

	// Create the user message
	message := &model.SupportMessage{
		ID:             uuid.NewString(),
		ChatID:         chatID,
		IsStaffMessage: isStaffMessage,
		Text:           text,
		FileURL:        service.GetStringOrDefault(fileURL),
		ImageURL:       service.GetStringOrDefault(imageURL),
		CreatedAt:      time.Now(),
	}
	err = db.Create(message).Error
	if err != nil {
		return nil, err
	}

	return message, nil
}

// User is the resolver for the user field.
func (r *notificationResolver) User(ctx context.Context, obj *model.Notification) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// UserNotifications is the resolver for the userNotifications field.
func (r *queryResolver) UserNotifications(ctx context.Context) ([]*model.Notification, error) {
	// Get the authenticated user
	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID
	_, err := service.UserGetByID(ctx, userID)
	if err != nil {
		return nil, err
	}

	// Get user notifications ordered by createdAt in descending order
	db := config.GetDB()
	var notifications []*model.Notification
	err = db.Where("user_id = ?", userID).Order("created_at desc").Find(&notifications).Error
	if err != nil {
		return nil, err
	}

	return notifications, nil
}

// ShopNotifications is the resolver for the shopNotifications field.
func (r *queryResolver) ShopNotifications(ctx context.Context) ([]*model.Notification, error) {
	panic(fmt.Errorf("not implemented: ShopNotifications - shopNotifications"))
}

// SellerChats is the resolver for the sellerChats field.
func (r *queryResolver) SellerChats(ctx context.Context) ([]*model.UserChat, error) {
	// Get the authenticated user
	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID

	db := config.GetDB()
	chats := []*model.UserChat{}
	err := db.Where("customer_id = ?", userID).Order("created_at DESC").Find(&chats).Error
	if err != nil {
		return nil, err
	}

	return chats, nil
}

// CustomerChats is the resolver for the customerChats field.
func (r *queryResolver) CustomerChats(ctx context.Context) ([]*model.UserChat, error) {
	// Get the authenticated user
	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID
	shop, _ := service.ShopGetByUserID(ctx, userID)

	db := config.GetDB()
	chats := []*model.UserChat{}

	err := db.Where("seller_id = ?", shop.ID).Order("created_at DESC").Find(&chats).Error
	if err != nil {
		return nil, err
	}

	return chats, nil
}

// SupportChat is the resolver for the supportChat field.
func (r *queryResolver) SupportChat(ctx context.Context) (*model.SupportChat, error) {
	// Get the authenticated user
	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID

	db := config.GetDB()
	chat := &model.SupportChat{}
	err := db.Where("customer_id = ?", userID).Order("created_at DESC").First(chat).Error
	if err != nil {
		return nil, err
	}

	return chat, nil
}

// SupportChats is the resolver for the supportChats field.
func (r *queryResolver) SupportChats(ctx context.Context) ([]*model.SupportChat, error) {
	db := config.GetDB()
	chats := []*model.SupportChat{}
	err := db.Order("is_resolved ASC, created_at DESC").Find(&chats).Error
	if err != nil {
		return nil, err
	}

	return chats, nil
}

// Customer is the resolver for the customer field.
func (r *supportChatResolver) Customer(ctx context.Context, obj *model.SupportChat) (*model.User, error) {
	db := config.GetDB()

	user := new(model.User)
	if err := db.Where("id = ?", obj.CustomerID).First(user).Error; err != nil {
		return nil, err
	}

	return user, nil
}

// Messages is the resolver for the messages field.
func (r *supportChatResolver) Messages(ctx context.Context, obj *model.SupportChat) ([]*model.SupportMessage, error) {
	db := config.GetDB()

	var messages []*model.SupportMessage
	if err := db.Where("chat_id = ?", obj.ID).Order("created_at DESC").Find(&messages).Error; err != nil {
		return nil, err
	}

	return messages, nil
}

// Chat is the resolver for the chat field.
func (r *supportMessageResolver) Chat(ctx context.Context, obj *model.SupportMessage) (*model.SupportChat, error) {
	db := config.GetDB()

	sc := new(model.SupportChat)
	if err := db.Where("id = ?", obj.ChatID).First(sc).Error; err != nil {
		return nil, err
	}

	return sc, nil
}

// Seller is the resolver for the seller field.
func (r *userChatResolver) Seller(ctx context.Context, obj *model.UserChat) (*model.Shop, error) {
	db := config.GetDB()

	shop := new(model.Shop)
	if err := db.Where("id = ?", obj.SellerID).First(shop).Error; err != nil {
		return nil, err
	}

	return shop, nil
}

// Customer is the resolver for the customer field.
func (r *userChatResolver) Customer(ctx context.Context, obj *model.UserChat) (*model.User, error) {
	db := config.GetDB()

	user := new(model.User)
	if err := db.Where("id = ?", obj.CustomerID).First(user).Error; err != nil {
		return nil, err
	}

	return user, nil
}

// Messages is the resolver for the messages field.
func (r *userChatResolver) Messages(ctx context.Context, obj *model.UserChat) ([]*model.UserMessage, error) {
	db := config.GetDB()

	var messages []*model.UserMessage
	if err := db.Where("chat_id = ?", obj.ID).Order("created_at DESC").Find(&messages).Error; err != nil {
		return nil, err
	}

	return messages, nil
}

// Chat is the resolver for the chat field.
func (r *userMessageResolver) Chat(ctx context.Context, obj *model.UserMessage) (*model.UserChat, error) {
	db := config.GetDB()

	uc := new(model.UserChat)
	if err := db.Where("id = ?", obj.ChatID).First(uc).Error; err != nil {
		return nil, err
	}

	return uc, nil
}

// Notification returns NotificationResolver implementation.
func (r *Resolver) Notification() NotificationResolver { return &notificationResolver{r} }

// SupportChat returns SupportChatResolver implementation.
func (r *Resolver) SupportChat() SupportChatResolver { return &supportChatResolver{r} }

// SupportMessage returns SupportMessageResolver implementation.
func (r *Resolver) SupportMessage() SupportMessageResolver { return &supportMessageResolver{r} }

// UserChat returns UserChatResolver implementation.
func (r *Resolver) UserChat() UserChatResolver { return &userChatResolver{r} }

// UserMessage returns UserMessageResolver implementation.
func (r *Resolver) UserMessage() UserMessageResolver { return &userMessageResolver{r} }

type notificationResolver struct{ *Resolver }
type supportChatResolver struct{ *Resolver }
type supportMessageResolver struct{ *Resolver }
type userChatResolver struct{ *Resolver }
type userMessageResolver struct{ *Resolver }
