package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"

	"github.com/google/uuid"
	"github.com/jxsr12/oldegg/config"
	"github.com/jxsr12/oldegg/graph/model"
	"github.com/jxsr12/oldegg/service"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// User is the resolver for the user field.
func (r *addressResolver) User(ctx context.Context, obj *model.Address) (*model.User, error) {
	db := config.GetDB()
	user := new(model.User)

	return user, db.First(user, "id = ?", obj.UserID).Error
}

// CreateAddress is the resolver for the createAddress field.
func (r *mutationResolver) CreateAddress(ctx context.Context, name string, content string, primary bool) (*model.Address, error) {
	if name == "" || content == "" {
		return nil, &gqlerror.Error{
			Message: "Name and content cannot be empty",
		}
	}

	db := config.GetDB()
	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Error, token gaada",
		}
	}

	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID

	if primary {
		err := db.Model(&model.Address{}).Where("user_id = ? AND \"primary\" = ?", userID, true).Update("primary", false).Error
		if err != nil {
			return nil, err
		}
	}

	model := &model.Address{
		ID:      uuid.NewString(),
		Name:    name,
		Content: content,
		UserID:  userID,
		Primary: primary,
	}

	return model, db.Create(model).Error
}

// DeleteAddress is the resolver for the deleteAddress field.
func (r *mutationResolver) DeleteAddress(ctx context.Context, id string) (bool, error) {
	db := config.GetDB()
	if ctx.Value("auth") == nil {
		return false, &gqlerror.Error{
			Message: "Error, token gaada",
		}
	}

	// Find the address with the specified ID
	var address model.Address
	err := db.Where("id = ? AND user_id = ?", id, ctx.Value("auth").(*service.JwtCustomClaim).ID).First(&address).Error
	if err != nil {
		return false, err
	}

	// Delete the address
	err = db.Delete(&address).Error
	if err != nil {
		return false, err
	}

	return true, nil
}

// TogglePrimaryAddress is the resolver for the togglePrimaryAddress field.
func (r *mutationResolver) TogglePrimaryAddress(ctx context.Context, id string) (*model.Address, error) {
	db := config.GetDB()

	model := new(model.Address)

	if err := db.First(model, "id = ?", id).Error; err != nil {
		return nil, err
	}

	model.Primary = !model.Primary

	return model, db.Save(model).Error
}

// Address is the resolver for the address field.
func (r *queryResolver) Address(ctx context.Context, id string) (*model.Address, error) {
	db := config.GetDB()
	address := new(model.Address)

	return address, db.First(address, "id = ?", id).Error
}

// Addresses is the resolver for the addresses field.
func (r *queryResolver) Addresses(ctx context.Context) ([]*model.Address, error) {
	db := config.GetDB()

	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Error, token gaada",
		}
	}

	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID

	var models []*model.Address
	return models, db.Where("user_id = ?", userID).Find(&models).Error
}

// Address returns AddressResolver implementation.
func (r *Resolver) Address() AddressResolver { return &addressResolver{r} }

type addressResolver struct{ *Resolver }
