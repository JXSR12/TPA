package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jxsr12/oldegg/config"
	"github.com/jxsr12/oldegg/graph/model"
	"github.com/jxsr12/oldegg/service"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// CreateReview is the resolver for the createReview field.
func (r *mutationResolver) CreateReview(ctx context.Context, productID string, rating int, description string, onTimeDelivery bool, productAccuracy bool, serviceSatisfaction bool, isAnonymous bool) (*model.Review, error) {
	db := config.GetDB()

	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Error, token gaada",
		}
	}

	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID

	// Check if ReviewCredit exists for the user and product
	var reviewCredit model.ReviewCredit
	err := db.Where("user_id = ? AND product_id = ?", userID, productID).First(&reviewCredit).Error
	if err != nil {
		return nil, &gqlerror.Error{
			Message: "Error, ReviewCredit doesn't exist",
		}
	}

	// Create the review
	model := &model.Review{
		ID:                  uuid.NewString(),
		CreatedAt:           time.Now(),
		UserID:              userID,
		ProductID:           productID,
		Rating:              rating,
		OnTimeDelivery:      onTimeDelivery,
		ProductAccuracy:     productAccuracy,
		ServiceSatisfaction: serviceSatisfaction,
		Description:         description,
		IsAnonymous:         isAnonymous,
	}

	if err := db.Create(model).Error; err != nil {
		return nil, &gqlerror.Error{
			Message: "Error creating review",
		}
	}

	// delete one ReviewCredit entity
	if err := db.Where("user_id = ? AND product_id = ?", userID, productID).Delete(&reviewCredit).Error; err != nil {
		return nil, err
	}

	return model, nil
}

// CreateSupportChatReview is the resolver for the createSupportChatReview field.
func (r *mutationResolver) CreateSupportChatReview(ctx context.Context, rating int, description string) (*model.SupportChatReview, error) {
	db := config.GetDB()

	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Error, token gaada",
		}
	}

	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID

	// Create the review
	model := &model.SupportChatReview{
		ID:          uuid.NewString(),
		CreatedAt:   time.Now(),
		UserID:      userID,
		Rating:      rating,
		Description: description,
	}

	if err := db.Create(model).Error; err != nil {
		return nil, &gqlerror.Error{
			Message: "Error creating support chat review",
		}
	}

	return model, nil
}

// UpdateReview is the resolver for the updateReview field.
func (r *mutationResolver) UpdateReview(ctx context.Context, id string, rating int, description string, onTimeDelivery bool, productAccuracy bool, serviceSatisfaction bool) (*model.Review, error) {
	db := config.GetDB()

	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Error, token gaada",
		}
	}

	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID

	// Check if the review exists
	var review model.Review
	err := db.Where("id = ?", id).First(&review).Error
	if err != nil {
		return nil, &gqlerror.Error{
			Message: "Error, Review doesn't exist",
		}
	}

	// Check if the user who made the review matches the user in the auth context
	if review.UserID != userID {
		return nil, &gqlerror.Error{
			Message: "Error, unauthorized to update review",
		}
	}

	// Update the review
	review.Rating = rating
	review.Description = description
	review.OnTimeDelivery = onTimeDelivery
	review.ProductAccuracy = productAccuracy
	review.ServiceSatisfaction = serviceSatisfaction

	if err := db.Save(&review).Error; err != nil {
		return nil, &gqlerror.Error{
			Message: "Error updating review",
		}
	}

	return &review, nil
}

// DeleteReview is the resolver for the deleteReview field.
func (r *mutationResolver) DeleteReview(ctx context.Context, id string) (bool, error) {
	db := config.GetDB()

	if ctx.Value("auth") == nil {
		return false, &gqlerror.Error{
			Message: "Error, token gaada",
		}
	}

	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID

	// Check if the review exists
	var review model.Review
	err := db.Where("id = ?", id).First(&review).Error
	if err != nil {
		return false, &gqlerror.Error{
			Message: "Error, Review doesn't exist",
		}
	}

	// Check if the user who made the review matches the user in the auth context
	if review.UserID != userID {
		return false, &gqlerror.Error{
			Message: "Error, unauthorized to delete review",
		}
	}

	// Delete the review
	if err := db.Delete(&review).Error; err != nil {
		return false, &gqlerror.Error{
			Message: "Error deleting review",
		}
	}

	return true, nil
}

// Reviews is the resolver for the reviews field.
func (r *queryResolver) Reviews(ctx context.Context, productID string) ([]*model.Review, error) {
	db := config.GetDB()

	var models []*model.Review
	return models, db.Where("product_id = ?", productID).Find(&models).Error
}

// UserReviews is the resolver for the userReviews field.
func (r *queryResolver) UserReviews(ctx context.Context) ([]*model.Review, error) {
	db := config.GetDB()

	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Error, token gaada",
		}
	}

	// Retrieve user ID from context
	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID

	// Query all reviews by user ID
	var models []*model.Review
	return models, db.Where("user_id = ?", userID).Find(&models).Error
}

// ReviewableProducts is the resolver for the reviewableProducts field.
func (r *queryResolver) ReviewableProducts(ctx context.Context) ([]*model.Product, error) {
	db := config.GetDB()

	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Error, token gaada",
		}
	}

	// Get the user ID from the context.
	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID

	// Find all products that have a ReviewCredit with the user's ID.
	var products []*model.Product
	err := db.
		Table("products").
		Joins("INNER JOIN review_credits ON products.id = review_credits.product_id").
		Where("review_credits.user_id = ?", userID).
		Group("products.id").
		Find(&products).Error

	if err != nil {
		return nil, err
	}

	return products, nil
}

// SupportChatReviews is the resolver for the supportChatReviews field.
func (r *queryResolver) SupportChatReviews(ctx context.Context) ([]*model.SupportChatReview, error) {
	db := config.GetDB()

	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Error, token gaada",
		}
	}

	// Query all reviews by user ID
	var models []*model.SupportChatReview
	return models, db.Find(&models).Error
}

// User is the resolver for the user field.
func (r *reviewResolver) User(ctx context.Context, obj *model.Review) (*model.User, error) {
	db := config.GetDB()

	var user model.User
	if err := db.Where("id = ?", obj.UserID).First(&user).Error; err != nil {
		return nil, err
	}

	return &user, nil
}

// Product is the resolver for the product field.
func (r *reviewResolver) Product(ctx context.Context, obj *model.Review) (*model.Product, error) {
	db := config.GetDB()
	var product model.Product
	if err := db.Where("id = ?", obj.ProductID).First(&product).Error; err != nil {
		return nil, err
	}

	return &product, nil
}

// Product is the resolver for the product field.
func (r *reviewCreditResolver) Product(ctx context.Context, obj *model.ReviewCredit) (*model.Product, error) {
	db := config.GetDB()
	var product model.Product
	if err := db.Where("id = ?", obj.ProductID).First(&product).Error; err != nil {
		return nil, err
	}

	return &product, nil
}

// User is the resolver for the user field.
func (r *reviewCreditResolver) User(ctx context.Context, obj *model.ReviewCredit) (*model.User, error) {
	db := config.GetDB()
	var user model.User
	if err := db.Where("id = ?", obj.UserID).First(&user).Error; err != nil {
		return nil, err
	}

	return &user, nil
}

// User is the resolver for the user field.
func (r *supportChatReviewResolver) User(ctx context.Context, obj *model.SupportChatReview) (*model.User, error) {
	db := config.GetDB()
	var user model.User
	if err := db.Where("id = ?", obj.UserID).First(&user).Error; err != nil {
		return nil, err
	}

	return &user, nil
}

// Review returns ReviewResolver implementation.
func (r *Resolver) Review() ReviewResolver { return &reviewResolver{r} }

// ReviewCredit returns ReviewCreditResolver implementation.
func (r *Resolver) ReviewCredit() ReviewCreditResolver { return &reviewCreditResolver{r} }

// SupportChatReview returns SupportChatReviewResolver implementation.
func (r *Resolver) SupportChatReview() SupportChatReviewResolver {
	return &supportChatReviewResolver{r}
}

type reviewResolver struct{ *Resolver }
type reviewCreditResolver struct{ *Resolver }
type supportChatReviewResolver struct{ *Resolver }
