scalar Time

type Product {
  id: ID!
  name: String!
  images: [ProductImage!]! @goField(forceResolver: true)
  description: String!
  price: Float!
  discount: Float!
  stock: Int!
  metadata: String!
  createdAt: Time!
  validTo: Time
  shop: Shop! @goField(forceResolver: true)
  group: ProductGroup! @goField(forceResolver: true)
  brand: ProductBrand! @goField(forceResolver: true)

  category: Category! @goField(forceResolver: true)
  reviews: [Review!]! @goField(forceResolver: true)
}

type ProductGroup {
    id: ID!
}

type ProductBrand {
    id: ID!
    name: String!
    logo: String!
}

type ProductImage {
  id: ID!
  image: String!
  product: Product! @goField(forceResolver: true)
}

type Category {
  id: ID!
  name: String!
  products: [Product!]! @goField(forceResolver: true)
}

type SearchQuery{
  id: ID!
  query: String!
  count: Int!
}

type PromotionBanner{
  id: ID!
  title: String!
  link: String!
  image: String!
}

type UserSearch{
  createdAt: Time! @goField(forceResolver: false)
  user: User! @goField(forceResolver: true)
  search: SearchQuery! @goField(forceResolver: true)
}

extend type Query {
  category(id: ID!): Category!
  categories(limit: Int): [Category!]!
  product(id: ID!): Product!
  products(shopID: ID, limit: Int, offset: Int, input: SearchProduct, topSold: Boolean): [Product!]!
  recommendedProducts(limit: Int, offset: Int): [Product!]!
  brands(topSold: Boolean!): [ProductBrand!]!
  userSearches(limit: Int): [UserSearch!]! @auth
  popularSearches(limit: Int): [SearchQuery!]!
  promotionBanners: [PromotionBanner!]!
}

extend type Mutation {
  createProduct(input: NewProduct!, shopID: ID!): Product! @auth
  createProductVariant(input: NewProduct!, groupID: ID!): Product! @auth
  createProductImage(image: String!, productID: ID!): ProductImage! @auth
  deleteProductImage(image: String!, productID: ID!): Boolean! @auth

  createProductImages(images: [String!]!, productID: ID!): Boolean! @auth
  createBrand(name: String!, logo: String!): ProductBrand! @auth
  createCategory(name: String!): Category! @auth

  createSearchQuery(query: String): SearchQuery!
  saveUserSearch(query: String): UserSearch! @auth
  deleteUserSearch(query: String): UserSearch! @auth

  createPromotionBanner(title: String!, link: String!, image: String!): PromotionBanner! @auth
  deletePromotionBanner(id: ID!): Boolean! @auth

  createProductAuto(input: NewProduct!): Product! @auth
  updateProduct(productID: ID!, input: NewProduct!): Product! @auth
  deleteProduct(productID: ID!): Product! @auth
}

input NewProduct {
  name: String!
  description: String!
  price: Float!
  discount: Float!
  metadata: String!
  stock: Int!
  categoryID: ID!
  brandID: ID!
}

input SearchProduct {
  keyword: String
  minPrice: Float
  maxPrice: Float
  orderBy: String
  categoryID: String
  brandID: String
  groupID: String
  exceptID: String
  isDiscount: Boolean
  createdAtRange: Int
  highRating: Boolean
}