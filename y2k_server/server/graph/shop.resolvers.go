package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"

	"github.com/google/uuid"
	"github.com/jxsr12/oldegg/config"
	"github.com/jxsr12/oldegg/graph/model"
	"github.com/jxsr12/oldegg/service"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// CreateShop is the resolver for the createShop field.
func (r *mutationResolver) CreateShop(ctx context.Context, input model.NewShop) (*model.Shop, error) {
	db := config.GetDB()
	fmt.Println("CREATE SHOP")
	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Error, token gaada",
		}
	}

	fmt.Println("AUTH USER ID", ctx.Value("auth").(*service.JwtCustomClaim).ID)
	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID

	shop, _ := service.ShopGetByUserID(ctx, userID)

	if shop != nil {
		return nil, &gqlerror.Error{
			Message: "Error, user already has shop",
		}
	}

	model := &model.Shop{
		ID:          uuid.NewString(),
		Name:        input.Name,
		Address:     input.Address,
		ProfilePic:  input.ProfilePic,
		Description: input.Description,
		UserID:      userID,
	}

	return model, db.Create(model).Error
}

// UpdateShop is the resolver for the updateShop field.
func (r *mutationResolver) UpdateShop(ctx context.Context, input model.NewShop) (*model.Shop, error) {
	panic(fmt.Errorf("not implemented: UpdateShop - updateShop"))
}

// Shop is the resolver for the shop field.
func (r *queryResolver) Shop(ctx context.Context, id *string, keyword *string) (*model.Shop, error) {
	panic(fmt.Errorf("not implemented: Shop - shop"))
}

// Shops is the resolver for the shops field.
func (r *queryResolver) Shops(ctx context.Context) ([]*model.Shop, error) {
	panic(fmt.Errorf("not implemented: Shops - shops"))
}

// User is the resolver for the user field.
func (r *shopResolver) User(ctx context.Context, obj *model.Shop) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Products is the resolver for the products field.
func (r *shopResolver) Products(ctx context.Context, obj *model.Shop, keyword *string, topSold *bool) ([]*model.Product, error) {
	panic(fmt.Errorf("not implemented: Products - products"))
}

// Shop returns ShopResolver implementation.
func (r *Resolver) Shop() ShopResolver { return &shopResolver{r} }

type shopResolver struct{ *Resolver }
